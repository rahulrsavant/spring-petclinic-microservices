pipeline{
    agent { label "master"}
    environment{
        appName="spring-petclinic-microservices"
        groupId="org.springframework.samples"
        version="1.0.${currentBuild.startTimeInMillis}"
        nexusGroupIdPath="org/springframework/samples"
        adminServerArtifactId="spring-petclinic-admin-server"
        apiGatewayArtifactId="spring-petclinic-api-gateway"
        configServerArtifactId="spring-petclinic-config-server"
        customersServiceArtifactId="spring-petclinic-customers-service"
        discoveryServerArtifactId="spring-petclinic-discovery-server"
        monitoringArtifactId="spring-petclinic-monitoring"
        tracingServerArtifactId="spring-petclinic-tracing-server"
        vetsServiceArtifactId="spring-petclinic-vets-service"
        visitsServiceArtifactId="spring-petclinic-visits-service"
        artifactPatternToArchive="target/**/*.jar"
        artifactPackaging="jar"
        junitTestStashIncludes='target/unit-test/**/*'
        junitArchiveTests="target/unit-test/surefire-reports/TEST-*.xml"

        adminServerPort="9090"
        apiGatewayPort="8080"
        configServerPort="8888"
        customersServicePort="8081"
        discoveryServerPort="8761"
        //monitoringPort=""
        tracingServerPort="9411"
        vetsServicePort="8083"
        visitsServicePort="8082"

    }

    stages{
        stage("Build and Unit Test"){
            steps{
                sh "mvn -B clean package -Drevision=${version}"
            }
            post{
                always{
                    //archive unit test in Jenkins
                    junit "${env.junitArchiveTests}"
                    //stash unit test
                    stash(includes: "${env.junitTestStashIncludes}", name: "${env.appName}UnitTest")
                }
                success{
                    //archive package in Jenkins
                    archiveArtifacts allowEmptyArchive: true, artifacts: "${env.artifactPatternToArchive}", fingerprint: true, onlyIfSuccessful: true

                    //stash package
                    stash(includes: "${env.artifactPatternToArchive}", name: "${env.appName}Package")
                    milestone(label: 'Build, Code Analysis and Publish to Nexus Snapshot', ordinal: 2)
                }
            }
        }
        stage("Build Docker"){
            parallel{
                stage("Docker 1 set"){
                    steps {
                        //adminServerArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${adminServerArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${adminServerPort} -f docker/Dockerfile " +
                                "-t ${appName}/${adminServerArtifactId}:${version} ."
                        //apiGatewayArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${apiGatewayArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${apiGatewayPort} -f docker/Dockerfile " +
                                "-t ${appName}/${apiGatewayArtifactId}:${version} ."
                        //configServerArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${configServerArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${configServerPort} -f docker/Dockerfile " +
                                "-t ${appName}/${configServerArtifactId}:${version} ."
                        //customersServiceArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${customersServiceArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${customersServicePort} -f docker/Dockerfile " +
                                "-t ${appName}/${customersServiceArtifactId}:${version} ."

                    }
                }
                stage("Docker 2 set"){
                    steps {
                        //discoveryServerArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${discoveryServerArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${discoveryServerPort} -f docker/Dockerfile " +
                                "-t ${appName}/${discoveryServerArtifactId}:${version} ."
                        //tracingServerArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${tracingServerArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${tracingServerPort} -f docker/Dockerfile " +
                                "-t ${appName}/${tracingServerArtifactId}:${version} ."
                        //vetsServiceArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${vetsServiceArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${vetsServicePort} -f docker/Dockerfile " +
                                "-t ${appName}/${vetsServiceArtifactId}:${version} ."
                        //visitsServiceArtifactId
                        sh "docker build --build-arg ARTIFACT_NAME=${visitsServiceArtifactId}-${version} " +
                                "--build-arg EXPOSED_PORT=${visitsServicePort} -f docker/Dockerfile " +
                                "-t ${appName}/${visitsServiceArtifactId}:${version} ."
                    }
                }
            }
        }
        stage("Deploy"){
            steps{
                sh "echo \"image_version=${env.version}\" > ${pwd()}/.env"
                sh "docker-compose -f docker-compose.yml up -d"
            }
        }
        stage("Quality"){
            steps{
                input "Check http://localhost:8080. Does everything looks good? If yes lets publish our artifacts"
            }
            post{
                always{
                    //clean deployment
                    sh "docker-compose -f docker-compose.yml rm --force --stop"
                }
            }
        }
        stage("Publish"){
            steps{
                echo "publish to Nexus"
            }
        }
    }
    post{
        always{
            deleteDir()
        }
    }
}